### CMMS Identity Service - JWT Authentication Testing
### This file can be used with VS Code REST Client extension or similar tools

@baseUrl = https://localhost:5001
@apiVersion = v1

### Step 1: Login to get JWT token
# @name login
POST {{baseUrl}}/api/{{apiVersion}}/auth/login
Content-Type: application/json

{
  "userName": "admin@example.com",
  "password": "Admin123!"
}

### Step 2: Extract JWT token from login response
# @name extractToken
# This is a comment - in actual usage, copy the accessToken from the login response
# and use it in the Authorization header for subsequent requests

### Step 3: Test protected endpoint - Get current user
# Replace YOUR_JWT_TOKEN_HERE with the actual token from login response
GET {{baseUrl}}/api/{{apiVersion}}/auth/me
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Step 4: Test MFA login flow (if MFA is enabled)
# First login (may return MFA challenge)
POST {{baseUrl}}/api/{{apiVersion}}/auth/login
Content-Type: application/json

{
  "userName": "admin@example.com",
  "password": "Admin123!"
}

### Step 5: Complete MFA login
# Use the sessionId from the MFA challenge response
POST {{baseUrl}}/api/{{apiVersion}}/auth/mfa-login
Content-Type: application/json

{
  "sessionId": "SESSION_ID_FROM_PREVIOUS_RESPONSE",
  "verificationCode": "123456"
}

### Step 6: Test user management endpoints
# Get all users
GET {{baseUrl}}/api/{{apiVersion}}/users
Authorization: Bearer YOUR_JWT_TOKEN_HERE

# Get user by ID
GET {{baseUrl}}/api/{{apiVersion}}/users/USER_ID_HERE
Authorization: Bearer YOUR_JWT_TOKEN_HERE

# Create a new user
POST {{baseUrl}}/api/{{apiVersion}}/users
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "userName": "testuser@example.com",
  "email": "testuser@example.com",
  "password": "Test123!",
  "phoneNumber": "+1234567890",
  "roleIds": ["ROLE_ID_HERE"]
}

### Step 7: Test role management endpoints
# Get all roles
GET {{baseUrl}}/api/{{apiVersion}}/roles
Authorization: Bearer YOUR_JWT_TOKEN_HERE

# Create a new role
POST {{baseUrl}}/api/{{apiVersion}}/roles
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "name": "TestRole",
  "description": "A test role for demonstration",
  "tenantId": "TENANT_ID_HERE",
  "permissionIds": ["PERMISSION_ID_HERE"]
}

### Step 8: Test permission management endpoints
# Get all permissions
GET {{baseUrl}}/api/{{apiVersion}}/permissions
Authorization: Bearer YOUR_JWT_TOKEN_HERE

# Get permission templates
GET {{baseUrl}}/api/{{apiVersion}}/permissions/templates
Authorization: Bearer YOUR_JWT_TOKEN_HERE

# Auto-generate permissions
POST {{baseUrl}}/api/{{apiVersion}}/permissions/auto-generate
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "tenantId": "TENANT_ID_HERE",
  "templates": [
    {
      "resource": "Users",
      "actions": ["Create", "Read", "Update", "Delete", "List"],
      "description": "User management permissions"
    }
  ],
  "overwriteExisting": false
}

### Step 9: Test tenant management endpoints
# Get all tenants
GET {{baseUrl}}/api/{{apiVersion}}/tenants
Authorization: Bearer YOUR_JWT_TOKEN_HERE

# Create a new tenant
POST {{baseUrl}}/api/{{apiVersion}}/tenants
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "name": "TestTenant",
  "description": "A test tenant for demonstration"
}

### Step 10: Test token refresh
# Refresh JWT token using refresh token
POST {{baseUrl}}/api/{{apiVersion}}/auth/refresh
Content-Type: application/json

{
  "refreshToken": "YOUR_REFRESH_TOKEN_HERE"
}

### Step 11: Test logout
# Logout and invalidate tokens
POST {{baseUrl}}/api/{{apiVersion}}/auth/logout
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "refreshToken": "YOUR_REFRESH_TOKEN_HERE"
}

### Step 12: Test password reset flow
# Request password reset
POST {{baseUrl}}/api/{{apiVersion}}/auth/forgot-password
Content-Type: application/json

{
  "phoneNumber": "+1234567890"
}

# Reset password with verification code
POST {{baseUrl}}/api/{{apiVersion}}/auth/reset-password
Content-Type: application/json

{
  "phoneNumber": "+1234567890",
  "verificationCode": "123456",
  "newPassword": "NewPassword123!"
}

### Step 13: Test change password (requires authentication)
POST {{baseUrl}}/api/{{apiVersion}}/auth/change-password
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "currentPassword": "CurrentPassword123!",
  "newPassword": "NewPassword123!"
}

### Step 14: Test MFA management (requires authentication)
# Enable MFA
POST {{baseUrl}}/api/{{apiVersion}}/auth/enable-mfa
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "phoneNumber": "+1234567890"
}

# Verify MFA
POST {{baseUrl}}/api/{{apiVersion}}/auth/verify-mfa
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "phoneNumber": "+1234567890",
  "verificationCode": "123456"
}

# Resend OTP
POST {{baseUrl}}/api/{{apiVersion}}/auth/resend-otp
Content-Type: application/json

{
  "phoneNumber": "+1234567890",
  "purpose": "MfaVerification"
}

### Health and Version Endpoints (No Auth Required)
# Health check
GET {{baseUrl}}/health

# Get API version info
GET {{baseUrl}}/api/{{apiVersion}}/version

# Root endpoint
GET {{baseUrl}}/

### Notes for Swagger UI Testing:
# 1. Use the login endpoint to get a JWT token
# 2. Copy the accessToken from the response
# 3. Click "Authorize" in Swagger UI
# 4. Enter: Bearer YOUR_TOKEN_HERE
# 5. Test protected endpoints
# 6. Use refresh endpoint when token expires 
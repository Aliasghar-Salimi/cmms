using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using MediatR;
using IdentityService.Application.Features.Permissions.DTOs;
using IdentityService.Application.Features.Permissions.Commands.CreatePermission;
using IdentityService.Application.Features.Permissions.Commands.UpdatePermission;
using IdentityService.Application.Features.Permissions.Commands.DeletePermission;
using IdentityService.Application.Features.Permissions.Commands.AutoGeneratePermissions;
using IdentityService.Application.Features.Permissions.Queries.GetPermission;
using IdentityService.Application.Features.Permissions.Queries.GetPermissions;

namespace IdentityService.Controllers;

[ApiController]
[Microsoft.AspNetCore.Mvc.ApiVersion("1.0")]
[Route("api/v{version:apiVersion}/[controller]")]
[Authorize]
public class PermissionsController : ControllerBase
{
    private readonly IMediator _mediator;

    public PermissionsController(IMediator mediator)
    {
        _mediator = mediator;
    }

    /// <summary>
    /// Get all permissions with filtering and pagination
    /// </summary>
    [HttpGet]
    [ProducesResponseType(typeof(List<PermissionDto>), 200)]
    [ProducesResponseType(typeof(ProblemDetails), 400)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> GetPermissions([FromQuery] GetPermissionsQuery query)
    {
        var result = await _mediator.Send(query);
        return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);
    }

    /// <summary>
    /// Get permission by ID
    /// </summary>
    [HttpGet("{id}")]
    [ProducesResponseType(typeof(PermissionDto), 200)]
    [ProducesResponseType(typeof(ProblemDetails), 404)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> GetPermission(string id)
    {
        var query = new GetPermissionQuery { Id = id };
        var result = await _mediator.Send(query);
        return result.IsSuccess ? Ok(result.Value) : NotFound(result.Error);
    }

    /// <summary>
    /// Create a new permission
    /// </summary>
    [HttpPost]
    [ProducesResponseType(typeof(PermissionDto), 201)]
    [ProducesResponseType(typeof(ProblemDetails), 400)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> CreatePermission([FromBody] CreatePermissionDto createPermissionDto)
    {
        var command = new CreatePermissionCommand
        {
            Name = createPermissionDto.Name,
            Description = createPermissionDto.Description,
            Resource = createPermissionDto.Resource,
            Action = createPermissionDto.Action,
            TenantId = createPermissionDto.TenantId
        };

        var result = await _mediator.Send(command);
        return result.IsSuccess ? CreatedAtAction(nameof(GetPermission), new { id = result.Value.Id }, result.Value) : BadRequest(result.Error);
    }

    /// <summary>
    /// Update an existing permission
    /// </summary>
    [HttpPut("{id}")]
    [ProducesResponseType(typeof(PermissionDto), 200)]
    [ProducesResponseType(typeof(ProblemDetails), 400)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> UpdatePermission(string id, [FromBody] UpdatePermissionDto updatePermissionDto)
    {
        var command = new UpdatePermissionCommand
        {
            Id = id,
            Name = updatePermissionDto.Name,
            Description = updatePermissionDto.Description,
            Resource = updatePermissionDto.Resource,
            Action = updatePermissionDto.Action
        };

        var result = await _mediator.Send(command);
        return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);
    }

    /// <summary>
    /// Delete a permission
    /// </summary>
    [HttpDelete("{id}")]
    [ProducesResponseType(204)]
    [ProducesResponseType(typeof(ProblemDetails), 400)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> DeletePermission(string id)
    {
        var command = new DeletePermissionCommand { Id = id };
        var result = await _mediator.Send(command);
        return result.IsSuccess ? NoContent() : BadRequest(result.Error);
    }

    /// <summary>
    /// Auto-generate permissions for a tenant
    /// </summary>
    [HttpPost("auto-generate")]
    [ProducesResponseType(typeof(List<PermissionDto>), 200)]
    [ProducesResponseType(typeof(ProblemDetails), 400)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> AutoGeneratePermissions([FromBody] AutoGeneratePermissionsDto autoGenerateDto)
    {
        var command = new AutoGeneratePermissionsCommand
        {
            TenantId = autoGenerateDto.TenantId,
            Templates = autoGenerateDto.Templates,
            OverwriteExisting = autoGenerateDto.OverwriteExisting
        };

        var result = await _mediator.Send(command);
        return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);
    }

    /// <summary>
    /// Get permissions by tenant
    /// </summary>
    [HttpGet("tenant/{tenantId}")]
    [ProducesResponseType(typeof(List<PermissionDto>), 200)]
    [ProducesResponseType(typeof(ProblemDetails), 400)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> GetPermissionsByTenant(string tenantId, [FromQuery] int page = 1, [FromQuery] int pageSize = 10)
    {
        var query = new GetPermissionsQuery
        {
            TenantId = tenantId,
            Page = page,
            PageSize = pageSize
        };

        var result = await _mediator.Send(query);
        return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);
    }

    /// <summary>
    /// Get permissions by resource
    /// </summary>
    [HttpGet("resource/{resource}")]
    [ProducesResponseType(typeof(List<PermissionDto>), 200)]
    [ProducesResponseType(typeof(ProblemDetails), 400)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> GetPermissionsByResource(string resource, [FromQuery] string? tenantId = null)
    {
        var query = new GetPermissionsQuery
        {
            Resource = resource,
            TenantId = tenantId,
            PageSize = 100 // Get all permissions for the resource
        };

        var result = await _mediator.Send(query);
        return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);
    }

    /// <summary>
    /// Get active permissions
    /// </summary>
    [HttpGet("active")]
    [ProducesResponseType(typeof(List<PermissionDto>), 200)]
    [ProducesResponseType(typeof(ProblemDetails), 400)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public async Task<IActionResult> GetActivePermissions([FromQuery] int page = 1, [FromQuery] int pageSize = 10)
    {
        var query = new GetPermissionsQuery
        {
            IsActive = true,
            Page = page,
            PageSize = pageSize
        };

        var result = await _mediator.Send(query);
        return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);
    }

    /// <summary>
    /// Get permission templates for auto-generation
    /// </summary>
    [HttpGet("templates")]
    [ProducesResponseType(typeof(List<PermissionTemplateDto>), 200)]
    [ProducesResponseType(typeof(ProblemDetails), 401)]
    public IActionResult GetPermissionTemplates()
    {
        var templates = new List<PermissionTemplateDto>
        {
            new PermissionTemplateDto
            {
                Resource = "Users",
                Actions = new List<string> { "Create", "Read", "Update", "Delete", "List", "ToggleStatus" },
                Description = "User management permissions"
            },
            new PermissionTemplateDto
            {
                Resource = "Tenants",
                Actions = new List<string> { "Create", "Read", "Update", "Delete", "List", "ToggleStatus", "Statistics" },
                Description = "Tenant management permissions"
            },
            new PermissionTemplateDto
            {
                Resource = "Roles",
                Actions = new List<string> { "Create", "Read", "Update", "Delete", "List", "ToggleStatus", "AssignPermissions" },
                Description = "Role management permissions"
            },
            new PermissionTemplateDto
            {
                Resource = "Permissions",
                Actions = new List<string> { "Create", "Read", "Update", "Delete", "List", "AutoGenerate" },
                Description = "Permission management permissions"
            },
            new PermissionTemplateDto
            {
                Resource = "System",
                Actions = new List<string> { "Admin", "Monitor", "Configure" },
                Description = "System administration permissions"
            },
            new PermissionTemplateDto
            {
                Resource = "Reports",
                Actions = new List<string> { "Generate", "View", "Export", "Schedule" },
                Description = "Report management permissions"
            },
            new PermissionTemplateDto
            {
                Resource = "Audit",
                Actions = new List<string> { "View", "Export", "Analyze" },
                Description = "Audit log permissions"
            }
        };

        return Ok(templates);
    }
} 
version: '3.8'

services:
  # Shared Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: cmms-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - cmms-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cmms-kafka
    deploy:
      resources:
        limits:
          memory: "1G"
          cpus: "1.0"
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - cmms-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    

  # ELK Stack Services
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cmms-elasticsearch
    deploy:
      resources:
        limits:
          memory: "1G"
          cpus: "1.0"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cmms-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: cmms-logstash
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - cmms-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cmms-kibana
    deploy:
      resources:
        limits:
          memory: "2G"
          cpus: "1.0"
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - cmms-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: cmms-sqlserver
    deploy:
      resources:
        limits:
          memory: "2G"
          cpus: "1.0"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Ali@1234
      - MSSQL_PID=Developer
      - MSSQL_MEMORY_LIMIT_MB=1536
      - MSSQL_AGENT_ENABLED=false
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - cmms-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Ali@1234 -C -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Identity Service
  identity-service:
    build:
      context: ./src/Services/IdentityService/IdentityService
      dockerfile: Dockerfile
    image: cmms-identity-service:latest
    container_name: cmms-identity-service
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=CMMSIdentityService;User=sa;Password=Ali@1234;TrustServerCertificate=True
      - Kafka__BootstrapServers=kafka:29092
      - Kafka__Topic=cmms-identity-service-topic
      - Kafka__AuditTopic=cmms-audit-logs
    depends_on:
      sqlserver:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - cmms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo 'Waiting for SQL Server to be ready...' &&
        sleep 10 &&
        echo 'Waiting for Kafka to be ready...' &&
        sleep 10 &&
        dotnet IdentityService.dll
      "

  # Audit Log Service
  auditlog-service:
    build:
      context: ./src/Services/AuditLogService/AuditLogService
      dockerfile: Dockerfile
    image: cmms-auditlog-service:latest
    container_name: cmms-auditlog-service
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_HTTP_PORTS=
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=CMMSAuditLogService;User=sa;Password=Ali@1234;TrustServerCertificate=True
      - Kafka__BootstrapServers=kafka:29092
      - Kafka__AuditTopic=cmms-audit-logs
    depends_on:
      sqlserver:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - cmms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo 'Waiting for SQL Server to be ready...' &&
        sleep 10 &&
        echo 'Waiting for Kafka to be ready...' &&
        sleep 10 &&
        dotnet AuditLogService.dll
      "

  # AssetService
  asset-service:
    build:
      context: ./src/Services/AssetService/AssetService
      dockerfile: Dockerfile
    image: cmms-asset-service:latest
    container_name: cmms-asset-service
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=CMMSAssetService;User=sa;Password=Ali@1234;TrustServerCertificate=True
      - Kafka__BootstrapServers=kafka:29092
      - Kafka__AuditTopic=cmms-audit-logs
      - Kafka__DefaultTopic=cmms-asset-events
      - IdentityService__BaseUrl=http://identity-service:5000
      - IdentityService__TimeoutSeconds=30
      - IdentityService__MaxRetries=3
      - IdentityService__RetryDelayMilliseconds=1000
    depends_on:
      sqlserver:
        condition: service_healthy
      kafka:
        condition: service_healthy
      identity-service:
        condition: service_healthy
    networks:
      - cmms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo 'Checking if SQL Server is healthy...' &&
        until curl -sf sqlserver:1433 > /dev/null; do
          echo 'Waiting for SQL Server...';
          sleep 2;
        done &&
        echo 'SQL Server is healthy.' &&

        echo 'Checking if Kafka is healthy...' &&
        until curl -sf kafka:9092 > /dev/null; do
          echo 'Waiting for Kafka...';
          sleep 2;
        done &&
        echo 'Kafka is healthy.' &&

        echo 'Checking if Identity Service is healthy...' &&
        until curl -sf http://identity-service:5000/health > /dev/null; do
          echo 'Waiting for Identity Service...';
          sleep 2;
        done &&
        echo 'Identity Service is healthy.' &&

        dotnet AssetService.dll
      "

  # Optional: Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cmms-kafka-ui
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cmms-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - cmms-network
    profiles:
      - monitoring

  # Optional: Database management tool
  adminer:
    image: adminer:latest
    container_name: cmms-adminer
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: sqlserver
    depends_on:
      - sqlserver
    networks:
      - cmms-network
    profiles:
      - monitoring

volumes:
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  sqlserver_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  cmms-network:
    driver: bridge 